# This workflow will build a Java project with Maven

name: Java CI with Maven

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      releaseVersion:
        description: "Default version to use when preparing a release."
        required: true
        default: ""
      developmentVersion:
        description: "Default version to use for new local working copy."
        required: true
        default: ""

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Maven Central Repository
      uses: actions/setup-java@v3
      with:
        java-version: 20.0.1
        distribution: 'temurin'
        java-package: 'jdk'
        cache: 'maven'
        server-id: ossrh
    - name: Configure Git User
      run: |
        git config user.email "actions@github.com"
        git config user.name "GitHub Actions"
    - name: Import GPG Key
      uses: crazy-max/ghaction-import-gpg@v5.0.0
      with:
        gpg_private_key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }}
        passphrase: ${{ secrets.MAVEN_GPG_PASSPHRASE }}
    - name: Check secrets presence
      id: checksecrets
      shell: bash
      run: |
        if [ "${{ github.event.inputs.releaseVersion }}" != "" && "${{ github.event.inputs.developmentVersion }}" != "" ]; then
          echo "auto_release=true" >> $GITHUB_OUTPUT
        else
          echo "auto_release=false" >> $GITHUB_OUTPUT
        fi
      env:
        SECRET: ${{ secrets.SECRET}}
    - name: run step if secret is present
      if: (steps.checksecrets.outputs.secretspresent == 'YES')
      run: echo secret is present
    - name: Release with Maven
      run: |
        mvn -X -B -U \
          -Pci-cd \
          release:prepare \
          release:perform \
          javadoc:jar \
          source:jar \
          -s settings.xml \
          -Dpublish.auto-release=${{ env.auto_release }} \
          -Dgpg.passphrase=${{ secrets.MAVEN_GPG_PASSPHRASE }} \
          -DreleaseVersion=${{ github.event.inputs.releaseVersion }} \
          -DdevelopmentVersion=${{ github.event.inputs.developmentVersion }} \
          deploy
      env:
        MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
        MAVEN_PASSWORD: ${{ secrets.OSSRH_TOKEN }}
    # - name: build artifact
    #   run: mvn clean package
    # - name: Release with Maven
    #   run: |
    #     mvn -X --batch-mode \
    #       release:clean \
    #       release:prepare \
    #       release:perform \
    #       -Dusername=naturalett \
    #       -s settings.xml \
    #       -DreleaseVersion=${{ github.event.inputs.releaseVersion }} \
    #       -DdevelopmentVersion=${{ github.event.inputs.developmentVersion }}
    #   env:
    #     OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
    #     OSSRH_TOKEN: ${{ secrets.OSSRH_TOKEN }}
    #     MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}
    #     MAVEN_GPG_PRIVATE_KEY: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }}
    #     GITHUB_TOKEN: ${{ secrets.TOKEN }}
    # - name: Deploy with Maven
    #   run: |
    #     mvn -U -X clean javadoc:jar source:jar -Pci-cd deploy
    #   env:
    #     MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
    #     MAVEN_PASSWORD: ${{ secrets.OSSRH_TOKEN }}
    #     MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}
    #     MAVEN_GPG_PRIVATE_KEY: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }}
    #     GITHUB_TOKEN: ${{ secrets.TOKEN }}
    # - name: Publish to Central Repository
    #   run: |
    #     mvn \
    #       --no-transfer-progress \
    #       --batch-mode \
    #       clean deploy
    #   env:
    #     MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
    #     MAVEN_PASSWORD: ${{ secrets.OSSRH_TOKEN }}
    #     MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}